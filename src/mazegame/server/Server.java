// A server is the main tool of the client.
//
// The server will be created by passing it some ServerSpecs,
// generated by CLOptions processing the command line arguments.
//
// The server will accept the hero movements invoked by the client
// and pass them to the maze.
//
// The server will also provide the client with the ClientView, which
// is all the client needs to renderize the game status to the
// player.

package mazegame.server;

import mazegame.core.Maze;
import mazegame.core.Map;
import mazegame.server.ServerSpec;
import mazegame.core.End;
import mazegame.core.Hero;
import mazegame.util.Direction;
import mazegame.util.Queue;

public class Server {

    private Maze maze;

    public Server(ServerSpec spec) {
        Map map = spec.generateMap();
        End end = spec.generateEnd();
        Hero hero = spec.generateHero();
        int trailCapacity = spec.generateTrailCapacity();
        this.maze = new Maze(map, end, hero, trailCapacity);
    }

    public boolean moveHero(Direction dir) {
        return maze.moveHero(dir);
    }

    public ClientView getClientView() {
        return maze.getClientView();
    }

    public Queue<Update> getUpdates() {
        return maze.getUpdates();
    }

    public boolean isGameOver() {
        return maze.isGameOver();
    }
}
